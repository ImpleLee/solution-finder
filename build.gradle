group 'com.knewjade'
version '0.710asc'

apply plugin: 'java'
apply plugin: 'idea'

archivesBaseName = 'solution-finder'
sourceCompatibility = 1.8

// Specify encoding of sources
def defaultEncoding = 'UTF-8'

tasks.withType(AbstractCompile).each {
    it.options.encoding = defaultEncoding
}

tasks.withType(GroovyCompile).each {
    it.groovyOptions.encoding = defaultEncoding
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.+'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.+'
    testCompile 'com.google.guava:guava:27.1-jre'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.+'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.+'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.+'
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'

    // for assertions
    testCompile 'org.assertj:assertj-core:3.+'
}

jar {
    manifest.attributes 'Main-Class': 'Main'
    from configurations.compile.collect {
        it.isDirectory() ? it : zipTree(it)
    }
}

def releaseDir = file 'release'
def distributionDir = file 'distribution'
def binaryDir = file 'binary'

task cleanReleaseDir(type: Task) {
    group = 'release'

    doLast {
        delete releaseDir
        releaseDir.mkdir()
    }
}

task copyRelease(type: Task) {
    group = 'release'

    doLast {
        // copy distribution
        copy {
            from distributionDir
            into releaseDir
            exclude '**/.*'
        }

        def jarName = String.format '%s-%s.jar', archivesBaseName, version
        def srcJarFile = file libsDir.canonicalPath + File.separator + jarName

        // copy jar
        copy {
            from srcJarFile
            into releaseDir
            rename { file -> 'sfinder.jar' }
        }

        // copy README
        def readmeName = "README.md"
        copy {
            from readmeName
            into releaseDir
        }
    }
}

task copyBinary(type: Task) {
    group = 'release'

    doLast {
        // copy distribution
        copy {
            from binaryDir
            into releaseDir
            exclude '**/.*'
        }
    }
}

task release(type: Zip) {
    group = 'release'

    // dependency
    dependsOn jar, cleanReleaseDir, copyRelease
    copyRelease.mustRunAfter jar, cleanReleaseDir

    from releaseDir
}

task releaseWithBianry(type: Zip) {
    group = 'release'

    // dependency
    dependsOn jar, cleanReleaseDir, copyRelease, copyBinary
    copyRelease.mustRunAfter jar, cleanReleaseDir
    copyBinary.mustRunAfter copyRelease

    from releaseDir
    classifier = "GUI"
}

test {
    useJUnitPlatform {
        if (System.getenv("TRAVIS_BRANCH") == "master") {
            println "[useJUnitPlatform] Run all tests"
        } else {
            println "[useJUnitPlatform] Run tests / Exclude tag:long"
            excludeTags 'long'
        }
    }
}